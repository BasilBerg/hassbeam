esphome:
  name: !secret device_name
  libraries:
    - "ArduinoJson"

esp32:
  board: esp32dev

# Substitutions for cleaner code
substitutions:
  device_name_sub: !secret device_name

logger:

ota:
  platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: !secret fallback_ssid
    password: !secret fallback_password

# Transmitter Configuration
remote_transmitter:
  pin: GPIO27
  carrier_duty_percent: 50%

# Api Configuration

api:
  services:
    - service: send_ir_aeha
      variables:
        address: int
        data: int[]
        carrier_frequency: float
      then:
        - remote_transmitter.transmit_aeha:
            address: !lambda "return address;"
            data: !lambda "return std::vector<unsigned char>(data.begin(), data.end());"
            carrier_frequency: !lambda "return carrier_frequency;"
        - script.execute:
            id: update_protocol_sent
            protocol: "AEHA"
    - service: send_ir_beo4
      variables:
        source: int
        command: int
      then:
        - remote_transmitter.transmit_beo4:
            source: !lambda "return source;"
            command: !lambda "return command;"
        - script.execute:
            id: update_protocol_sent
            protocol: "Beo4"

    - service: send_ir_jvc
      variables:
        data: int
      then:
        - remote_transmitter.transmit_jvc:
            data: !lambda "return data;"
        - script.execute:
            id: update_protocol_sent
            protocol: "JVC"

    - service: send_ir_haier
      variables:
        code: int[]
      then:
        - remote_transmitter.transmit_haier:
            code: !lambda "return std::vector<unsigned char>(code.begin(), code.end());"
        - script.execute:
            id: update_protocol_sent
            protocol: "Haier"

    - service: send_ir_lg
      variables:
        data: int
        nbits: int #default=28
      then:
        - remote_transmitter.transmit_lg:
            data: !lambda "return data;"
            nbits: !lambda "return nbits;"
        - script.execute:
            id: update_protocol_sent
            protocol: "LG"

    - service: send_ir_nec
      variables:
        address: int
        command: int
        command_repeats: int #default=1
      then:
        - remote_transmitter.transmit_nec:
            address: !lambda "return address;"
            command: !lambda "return command;"
            command_repeats: !lambda "return command_repeats;"
        - script.execute:
            id: update_protocol_sent
            protocol: "NEC"

    - service: send_ir_panasonic
      variables:
        address: int
        command: int
      then:
        - remote_transmitter.transmit_panasonic:
            address: !lambda "return address;"
            command: !lambda "return command;"
        - script.execute:
            id: update_protocol_sent
            protocol: "Panasonic"

    - service: send_ir_pioneer
      variables:
        rc_code_1: int
        rc_code_2: int
        repeat_times: int
      then:
        - remote_transmitter.transmit_pioneer:
            rc_code_1: !lambda "return rc_code_1;"
            rc_code_2: !lambda "return rc_code_2;"
            repeat:
              times: !lambda "return repeat_times;"
        - script.execute:
            id: update_protocol_sent
            protocol: "Pioneer"

    - service: send_ir_pioneer_simple
      variables:
        rc_code_1: int
      then:
        - remote_transmitter.transmit_pioneer:
            rc_code_1: !lambda "return rc_code_1;"
        - script.execute:
            id: update_protocol_sent
            protocol: "Pioneer Simple"

    - service: send_ir_pronto
      variables:
        data: string
      then:
        - remote_transmitter.transmit_pronto:
            data: !lambda "return data.c_str();"
        - script.execute:
            id: update_protocol_sent
            protocol: "Pronto"

    - service: send_ir_raw
      variables:
        data: string
        freq: float # default 0, common 38000
      then:
        - remote_transmitter.transmit_raw:
            code: !lambda |-
              std::vector<int> out;
              return out;
            carrier_frequency: !lambda "return freq;"
        - script.execute:
            id: update_protocol_sent
            protocol: "Raw"

    - service: send_ir_rc5
      variables:
        address: int
        command: int
      then:
        - remote_transmitter.transmit_rc5:
            address: !lambda "return address;"
            command: !lambda "return command;"
        - script.execute:
            id: update_protocol_sent
            protocol: "RC5"

    - service: send_ir_rc6
      variables:
        address: int
        command: int
      then:
        - remote_transmitter.transmit_rc6:
            address: !lambda "return address;"
            command: !lambda "return command;"
        - script.execute:
            id: update_protocol_sent
            protocol: "RC6"

    - service: send_ir_roomba
      variables:
        data: int
        repeat_times: int # default 3
        wait_time_ms: int # default 17ms
      then:
        - remote_transmitter.transmit_roomba:
            data: !lambda "return data;"
            repeat:
              times: !lambda "return repeat_times;"
              wait_time: !lambda "return wait_time_ms;"
        - script.execute:
            id: update_protocol_sent
            protocol: "Roomba"

    - service: send_ir_samsung
      variables:
        data: int
        nbits: int # odefault 32
      then:
        - remote_transmitter.transmit_samsung:
            data: !lambda "return data;"
            nbits: !lambda "return nbits;"
        - script.execute:
            id: update_protocol_sent
            protocol: "Samsung"

    - service: send_ir_samsung36
      variables:
        address: int
        command: int
      then:
        - remote_transmitter.transmit_samsung36:
            address: !lambda "return address;"
            command: !lambda "return command;"
        - script.execute:
            id: update_protocol_sent
            protocol: "Samsung36"

    - service: send_sony
      variables:
        data: int
        nbits: int # default = 12
      then:
        - remote_transmitter.transmit_sony:
            data: !lambda "return data;"
            nbits: !lambda "return nbits;"
        - script.execute:
            id: update_protocol_sent
            protocol: "Sony"

    - service: send_toshiba_ac
      variables:
        rc_code_1: int
        rc_code_2: int #optional
      then:
        - remote_transmitter.transmit_toshiba_ac:
            rc_code_1: !lambda "return rc_code_1;"
            rc_code_2: !lambda "return rc_code_2;"
        - script.execute:
            id: update_protocol_sent
            protocol: "Toshiba AC"

remote_receiver:
  pin:
    number: GPIO14
    inverted: true
    mode:
      input: true
      pullup: true
  dump: all
  idle: 25ms
  buffer_size: 2kb

  on_aeha:
    - homeassistant.event:
        event: esphome.hassbeam.ir_received
        data:
          hassbeam_device: ${device_name_sub}
          protocol: "AEHA"
          address: !lambda 'return "0x" + format_hex(x.address);'
          data: !lambda |-
            std::string str = "[ ";
            for (auto value : x.data) {
              str += std::to_string(value);
              str += ", ";
            }
            str += "]";
            return str;

    - script.execute:
        id: update_protocol_received
        protocol: "AEHA"

  on_beo4:
    - homeassistant.event:
        event: esphome.hassbeam.ir_received
        data:
          hassbeam_device: ${device_name_sub}
          protocol: "Beo4"
          source: !lambda 'return "0x" + format_hex(x.source);'
          command: !lambda 'return "0x" + format_hex(x.command);'

    - script.execute:
        id: update_protocol_received
        protocol: "Beo4"

  on_jvc:
    - homeassistant.event:
        event: esphome.hassbeam.ir_received
        data:
          hassbeam_device: ${device_name_sub}
          protocol: "JVC"
          data: !lambda 'return "0x" + format_hex(x.data);'
    - script.execute:
        id: update_protocol_received
        protocol: "JVC"

  on_haier:
    - homeassistant.event:
        event: esphome.hassbeam.ir_received
        data:
          hassbeam_device: ${device_name_sub}
          protocol: "Haier"
          data: !lambda |-
            std::string str = "[ ";
            for (size_t i = 0; i < x.data.size(); i++) {
              str += std::to_string(x.data[i]);
              if (i < x.data.size() - 1) str += ", ";
            }
            str += " ]";
            return str;
    - script.execute:
        id: update_protocol_received
        protocol: "Haier"

  on_lg:
    then:
      - homeassistant.event:
          event: esphome.hassbeam.ir_received
          data:
            hassbeam_device: ${device_name_sub}
            protocol: "LG"
            data: !lambda 'return "0x" + format_hex(x.data);'
            nbits: !lambda "return x.nbits;"
      - script.execute:
          id: update_protocol_received
          protocol: "LG"

  on_nec:
    - homeassistant.event:
        event: esphome.hassbeam.ir_received
        data:
          hassbeam_device: ${device_name_sub}
          protocol: "NEC"
          address: !lambda 'return "0x" + format_hex(x.address);'
          command: !lambda 'return "0x" + format_hex(x.command);'
          command_repeats: !lambda "return x.command_repeats;"
    - script.execute:
        id: update_protocol_received
        protocol: "NEC"

  on_panasonic:
    - homeassistant.event:
        event: esphome.hassbeam.ir_received
        data:
          hassbeam_device: ${device_name_sub}
          protocol: "Panasonic"
          address: !lambda 'return "0x" + format_hex(x.address);'
          command: !lambda 'return "0x" + format_hex(x.command);'
    - script.execute:
        id: update_protocol_received
        protocol: "Panasonic"

  on_pioneer:
    - homeassistant.event:
        event: esphome.hassbeam.ir_received
        data:
          hassbeam_device: ${device_name_sub}
          protocol: "Pioneer"
          rc_code_1: !lambda 'return "0x" + format_hex(x.rc_code_1);'
          rc_code_2: !lambda 'return "0x" + format_hex(x.rc_code_2);'
    - script.execute:
        id: update_protocol_received
        protocol: "Pioneer"

  on_pronto:
    - homeassistant.event:
        event: esphome.hassbeam.ir_received
        data:
          hassbeam_device: ${device_name_sub}
          protocol: "Pronto"
          data: !lambda "return x.data.c_str();"
    - script.execute:
        id: update_protocol_received
        protocol: "Pronto"

  on_raw:
    - homeassistant.event:
        event: esphome.hassbeam.ir_received
        data:
          hassbeam_device: ${device_name_sub}
          protocol: "Raw"
          data: !lambda |-
            std::string str = "[ ";
            for (size_t i = 0; i < x.size(); i++) {
              str += std::to_string(x[i]);
              if (i < x.size() - 1) str += ", ";
            }
            str += " ]";
            return str;
    - script.execute:
        id: update_protocol_received
        protocol: "Raw"

  on_rc5:
    - homeassistant.event:
        event: esphome.hassbeam.ir_received
        data:
          hassbeam_device: ${device_name_sub}
          protocol: "RC5"
          address: !lambda 'return "0x" + format_hex(x.address);'
          command: !lambda 'return "0x" + format_hex(x.command);'
    - script.execute:
        id: update_protocol_received
        protocol: "RC5"

  on_rc6:
    - homeassistant.event:
        event: esphome.hassbeam.ir_received
        data:
          hassbeam_device: ${device_name_sub}
          protocol: "RC6"
          address: !lambda 'return "0x" + format_hex(x.address);'
          command: !lambda 'return "0x" + format_hex(x.command);'
    - script.execute:
        id: update_protocol_received
        protocol: "RC6"

  on_roomba:
    - homeassistant.event:
        event: esphome.hassbeam.ir_received
        data:
          hassbeam_device: ${device_name_sub}
          protocol: "Roomba"
          data: !lambda 'return "0x" + format_hex(x.data);'
    - script.execute:
        id: update_protocol_received
        protocol: "Roomba"

  on_samsung:
    - homeassistant.event:
        event: esphome.hassbeam.ir_received
        data:
          hassbeam_device: ${device_name_sub}
          protocol: "Samsung"
          data: !lambda 'return "0x" + format_hex(x.data);'
          nbits: !lambda "return x.nbits;"
    - script.execute:
        id: update_protocol_received
        protocol: "Samsung"

  on_samsung36:
    - homeassistant.event:
        event: esphome.hassbeam.ir_received
        data:
          hassbeam_device: ${device_name_sub}
          protocol: "Samsung36"
          address: !lambda 'return "0x" + format_hex(x.address);'
          command: !lambda 'return "0x" + format_hex(x.command);'
    - script.execute:
        id: update_protocol_received
        protocol: "Samsung36"

  on_sony:
    - homeassistant.event:
        event: esphome.hassbeam.ir_received
        data:
          hassbeam_device: ${device_name_sub}
          protocol: "Sony"
          data: !lambda 'return "0x" + format_hex(x.data);'
          nbits: !lambda "return x.nbits;"
    - script.execute:
        id: update_protocol_received
        protocol: "Sony"

  on_toshiba_ac:
    - homeassistant.event:
        event: esphome.hassbeam.ir_received
        data:
          hassbeam_device: ${device_name_sub}
          protocol: "Toshiba AC"
          rc_code_1: !lambda 'return "0x" + format_hex(x.rc_code_1);'
          rc_code_2: !lambda 'return "0x" + format_hex(x.rc_code_2);'
    - script.execute:
        id: update_protocol_received
        protocol: "Toshiba AC"

#Script Configuration
script:
  - id: update_protocol_sent
    parameters:
      protocol: string
    then:
      - text_sensor.template.publish:
          id: protocol_sent
          state: !lambda "return protocol;"
      - delay: 100ms
      - text_sensor.template.publish:
          id: protocol_sent
          state: ""

  - id: update_protocol_received
    parameters:
      protocol: string
    then:
      - text_sensor.template.publish:
          id: protocol_received
          state: !lambda "return protocol;"
      - delay: 100ms
      - text_sensor.template.publish:
          id: protocol_received
          state: ""

#Sensor Configuration
text_sensor:
  - platform: template
    name: "protocol sent"
    id: protocol_sent
    update_interval: never
  - platform: template
    name: "protocol received"
    id: protocol_received
    update_interval: never
